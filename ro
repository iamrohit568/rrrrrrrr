import React, { useState, useEffect } from "react";
import { ITEMS } from "./data/benefitPlans";
import "./App.css";

function normalizeDifyResponse(rawResp) {
  if (!rawResp) return { planTypes: [], carrierNames: [], subCategories: [] };

  const data = rawResp.data || rawResp;

  const planTypes =
    data.planTypes || data.planType || data.plan_type || [];
  const carrierNames =
    data.carrierNames || data.carrierName || data.carrier_names || [];
  const subCategories =
    data.subCategories || data.subCategory || data.sub_categories || [];

  return {
    planTypes: Array.isArray(planTypes) ? planTypes.map(String) : [],
    carrierNames: Array.isArray(carrierNames) ? carrierNames.map(String) : [],
    subCategories: Array.isArray(subCategories) ? subCategories.map(String) : [],
  };
}

function applyFilters(items, filters) {
  let out = items.slice();

  const { planTypes, carrierNames, subCategories } = filters;

  if (planTypes?.length > 0) {
    const setPT = new Set(planTypes.map((p) => String(p).toLowerCase()));
    out = out.filter((it) =>
      it.planType ? setPT.has(String(it.planType).toLowerCase()) : false
    );
  }

  if (carrierNames?.length > 0) {
    const lowered = carrierNames.map((c) => String(c).toLowerCase());
    out = out.filter((it) => {
      const name = (it.carrierName || "").toLowerCase();
      return lowered.some((candidate) => name.includes(candidate));
    });
  }

  if (subCategories?.length > 0) {
    const lowered = subCategories.map((s) => String(s).toLowerCase());
    out = out.filter((it) => {
      const sc = (it.subCategory || "").toLowerCase();
      return lowered.some((candidate) => sc.includes(candidate));
    });
  }

  return out;
}

export default function App() {
  const [searchText, setSearchText] = useState("");
  const [loading, setLoading] = useState(false);
  const [filteredItems, setFilteredItems] = useState(ITEMS);
  const [error, setError] = useState(null);

  useEffect(() => {
    const timer = setTimeout(() => {
      if (searchText.trim() === "") {
        setFilteredItems(ITEMS);
        return;
      }
      handleSearch();
    }, 300);

    return () => clearTimeout(timer);
  }, [searchText]);

  async function handleSearch() {
    setError(null);
    setLoading(true);

    try {
      // Mock Dify response
      const mockResponse = {
        data: {
            carrierNames: ["Kaiser"],
            subCategories: ["Medical"],
            planTypes: ["HMO"],
          },
        success: true
      };
      
      const normalized = normalizeDifyResponse(mockResponse);
      const result = applyFilters(ITEMS, normalized);
      setFilteredItems(result);
    } catch (err) {
      setError(String(err));
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="app-container">
      <h2>Smart Plan Search</h2>

      <div className="controls">
        <input
          type="text"
          placeholder="Type your search_query..."
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
        />
      </div>

      <div className="results">
        <h3>Filtered Benefit Plans ({filteredItems.length})</h3>
        <table className="items-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>Name</th>
              <th>Carrier</th>
              <th>Plan Type</th>
              <th>SubCategory</th>
              <th>Renewal</th>
              <th>Sequoia Product</th>
            </tr>
          </thead>
          <tbody>
            {filteredItems.map((it) => (
              <tr key={it.id}>
                <td>{it.id}</td>
                <td>{it.name}</td>
                <td>{it.carrierName}</td>
                <td>{it.planType}</td>
                <td>{it.subCategory}</td>
                <td>{it.renewalStatus}</td>
                <td>{it.sequoiaProduct}</td>
              </tr>
            ))}
            {filteredItems.length === 0 && (
              <tr>
                <td colSpan="7" style={{ textAlign: "center" }}>
                  No plans match the filters.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
